// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_debug.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zss_debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZSS {
namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rectangle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rectangle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Line_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Arc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Arc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Polygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Text_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Curve__descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Curve__reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Curve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Curve_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Debug_Msg_Debug_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Debug_Msg_Color_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Debug_Msgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Msgs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zss_5fdebug_2eproto() {
  protobuf_AddDesc_zss_5fdebug_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zss_debug.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Rectangle_descriptor_ = file->message_type(1);
  static const int Rectangle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, point1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, point2_),
  };
  Rectangle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rectangle_descriptor_,
      Rectangle::default_instance_,
      Rectangle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rectangle));
  Debug_Robot_descriptor_ = file->message_type(2);
  static const int Debug_Robot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Robot, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Robot, dir_),
  };
  Debug_Robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Robot_descriptor_,
      Debug_Robot::default_instance_,
      Debug_Robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Robot));
  Debug_Line_descriptor_ = file->message_type(3);
  static const int Debug_Line_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, back_),
  };
  Debug_Line_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Line_descriptor_,
      Debug_Line::default_instance_,
      Debug_Line_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Line));
  Debug_Arc_descriptor_ = file->message_type(4);
  static const int Debug_Arc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, rectangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, fill_),
  };
  Debug_Arc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Arc_descriptor_,
      Debug_Arc::default_instance_,
      Debug_Arc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Arc));
  Debug_Polygon_descriptor_ = file->message_type(5);
  static const int Debug_Polygon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Polygon, vertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Polygon, fill_),
  };
  Debug_Polygon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Polygon_descriptor_,
      Debug_Polygon::default_instance_,
      Debug_Polygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Polygon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Polygon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Polygon));
  Debug_Text_descriptor_ = file->message_type(6);
  static const int Debug_Text_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Text, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Text, text_),
  };
  Debug_Text_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Text_descriptor_,
      Debug_Text::default_instance_,
      Debug_Text_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Text, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Text, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Text));
  Debug_Curve__descriptor_ = file->message_type(7);
  static const int Debug_Curve__offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve_, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve_, maxlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve_, minlimit_),
  };
  Debug_Curve__reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Curve__descriptor_,
      Debug_Curve_::default_instance_,
      Debug_Curve__offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve_, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve_, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Curve_));
  Debug_Curve_descriptor_ = file->message_type(8);
  static const int Debug_Curve_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, p1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, p2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, end_),
  };
  Debug_Curve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Curve_descriptor_,
      Debug_Curve::default_instance_,
      Debug_Curve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Curve));
  Debug_Msg_descriptor_ = file->message_type(9);
  static const int Debug_Msg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, arc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, curve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, polygon_),
  };
  Debug_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Msg_descriptor_,
      Debug_Msg::default_instance_,
      Debug_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Msg));
  Debug_Msg_Debug_Type_descriptor_ = Debug_Msg_descriptor_->enum_type(0);
  Debug_Msg_Color_descriptor_ = Debug_Msg_descriptor_->enum_type(1);
  Debug_Msgs_descriptor_ = file->message_type(10);
  static const int Debug_Msgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msgs, msgs_),
  };
  Debug_Msgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Msgs_descriptor_,
      Debug_Msgs::default_instance_,
      Debug_Msgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Msgs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zss_5fdebug_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rectangle_descriptor_, &Rectangle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Robot_descriptor_, &Debug_Robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Line_descriptor_, &Debug_Line::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Arc_descriptor_, &Debug_Arc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Polygon_descriptor_, &Debug_Polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Text_descriptor_, &Debug_Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Curve__descriptor_, &Debug_Curve_::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Curve_descriptor_, &Debug_Curve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Msg_descriptor_, &Debug_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Msgs_descriptor_, &Debug_Msgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zss_5fdebug_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Rectangle::default_instance_;
  delete Rectangle_reflection_;
  delete Debug_Robot::default_instance_;
  delete Debug_Robot_reflection_;
  delete Debug_Line::default_instance_;
  delete Debug_Line_reflection_;
  delete Debug_Arc::default_instance_;
  delete Debug_Arc_reflection_;
  delete Debug_Polygon::default_instance_;
  delete Debug_Polygon_reflection_;
  delete Debug_Text::default_instance_;
  delete Debug_Text_reflection_;
  delete Debug_Curve_::default_instance_;
  delete Debug_Curve__reflection_;
  delete Debug_Curve::default_instance_;
  delete Debug_Curve_reflection_;
  delete Debug_Msg::default_instance_;
  delete Debug_Msg_reflection_;
  delete Debug_Msgs::default_instance_;
  delete Debug_Msgs_reflection_;
}

void protobuf_AddDesc_zss_5fdebug_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017zss_debug.proto\022\014ZSS.Protocol\"\035\n\005Point"
    "\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"U\n\tRectangle\022#\n\006p"
    "oint1\030\001 \002(\0132\023.ZSS.Protocol.Point\022#\n\006poin"
    "t2\030\002 \002(\0132\023.ZSS.Protocol.Point\"<\n\013Debug_R"
    "obot\022 \n\003pos\030\001 \002(\0132\023.ZSS.Protocol.Point\022\013"
    "\n\003dir\030\002 \002(\002\"q\n\nDebug_Line\022\"\n\005start\030\001 \002(\013"
    "2\023.ZSS.Protocol.Point\022 \n\003end\030\002 \002(\0132\023.ZSS"
    ".Protocol.Point\022\017\n\007FORWARD\030\003 \002(\010\022\014\n\004BACK"
    "\030\004 \002(\010\"a\n\tDebug_Arc\022*\n\trectangle\030\001 \002(\0132\027"
    ".ZSS.Protocol.Rectangle\022\r\n\005start\030\002 \002(\002\022\013"
    "\n\003end\030\003 \002(\002\022\014\n\004FILL\030\004 \002(\010\"B\n\rDebug_Polyg"
    "on\022#\n\006vertex\030\001 \003(\0132\023.ZSS.Protocol.Point\022"
    "\014\n\004FILL\030\002 \002(\010\"<\n\nDebug_Text\022 \n\003pos\030\001 \002(\013"
    "2\023.ZSS.Protocol.Point\022\014\n\004text\030\002 \002(\t\"\?\n\014D"
    "ebug_Curve_\022\013\n\003num\030\001 \002(\002\022\020\n\010maxLimit\030\002 \002"
    "(\002\022\020\n\010minLimit\030\003 \002(\002\"\225\001\n\013Debug_Curve\022\"\n\005"
    "start\030\001 \002(\0132\023.ZSS.Protocol.Point\022\037\n\002p1\030\002"
    " \002(\0132\023.ZSS.Protocol.Point\022\037\n\002p2\030\003 \002(\0132\023."
    "ZSS.Protocol.Point\022 \n\003end\030\004 \002(\0132\023.ZSS.Pr"
    "otocol.Point\"\247\004\n\tDebug_Msg\0220\n\004type\030\001 \002(\016"
    "2\".ZSS.Protocol.Debug_Msg.Debug_Type\022,\n\005"
    "color\030\002 \002(\0162\035.ZSS.Protocol.Debug_Msg.Col"
    "or\022$\n\003arc\030\003 \001(\0132\027.ZSS.Protocol.Debug_Arc"
    "\022&\n\004line\030\004 \001(\0132\030.ZSS.Protocol.Debug_Line"
    "\022&\n\004text\030\005 \001(\0132\030.ZSS.Protocol.Debug_Text"
    "\022(\n\005robot\030\006 \001(\0132\031.ZSS.Protocol.Debug_Rob"
    "ot\022)\n\005curve\030\007 \001(\0132\032.ZSS.Protocol.Debug_C"
    "urve_\022,\n\007polygon\030\010 \001(\0132\033.ZSS.Protocol.De"
    "bug_Polygon\"L\n\nDebug_Type\022\007\n\003ARC\020\000\022\010\n\004LI"
    "NE\020\001\022\010\n\004TEXT\020\002\022\t\n\005ROBOT\020\003\022\t\n\005CURVE\020\004\022\013\n\007"
    "POLYGON\020\005\"s\n\005Color\022\t\n\005WHITE\020\000\022\007\n\003RED\020\001\022\n"
    "\n\006ORANGE\020\002\022\n\n\006YELLOW\020\003\022\t\n\005GREEN\020\004\022\010\n\004CYA"
    "N\020\005\022\010\n\004BLUE\020\006\022\n\n\006PURPLE\020\007\022\010\n\004GRAY\020\010\022\t\n\005B"
    "LACK\020\t\"3\n\nDebug_Msgs\022%\n\004msgs\030\001 \003(\0132\027.ZSS"
    ".Protocol.Debug_Msg", 1379);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zss_debug.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  Rectangle::default_instance_ = new Rectangle();
  Debug_Robot::default_instance_ = new Debug_Robot();
  Debug_Line::default_instance_ = new Debug_Line();
  Debug_Arc::default_instance_ = new Debug_Arc();
  Debug_Polygon::default_instance_ = new Debug_Polygon();
  Debug_Text::default_instance_ = new Debug_Text();
  Debug_Curve_::default_instance_ = new Debug_Curve_();
  Debug_Curve::default_instance_ = new Debug_Curve();
  Debug_Msg::default_instance_ = new Debug_Msg();
  Debug_Msgs::default_instance_ = new Debug_Msgs();
  Point::default_instance_->InitAsDefaultInstance();
  Rectangle::default_instance_->InitAsDefaultInstance();
  Debug_Robot::default_instance_->InitAsDefaultInstance();
  Debug_Line::default_instance_->InitAsDefaultInstance();
  Debug_Arc::default_instance_->InitAsDefaultInstance();
  Debug_Polygon::default_instance_->InitAsDefaultInstance();
  Debug_Text::default_instance_->InitAsDefaultInstance();
  Debug_Curve_::default_instance_->InitAsDefaultInstance();
  Debug_Curve::default_instance_->InitAsDefaultInstance();
  Debug_Msg::default_instance_->InitAsDefaultInstance();
  Debug_Msgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zss_5fdebug_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zss_5fdebug_2eproto {
  StaticDescriptorInitializer_zss_5fdebug_2eproto() {
    protobuf_AddDesc_zss_5fdebug_2eproto();
  }
} static_descriptor_initializer_zss_5fdebug_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Point)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Point)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rectangle::kPoint1FieldNumber;
const int Rectangle::kPoint2FieldNumber;
#endif  // !_MSC_VER

Rectangle::Rectangle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Rectangle)
}

void Rectangle::InitAsDefaultInstance() {
  point1_ = const_cast< ::ZSS::Protocol::Point*>(&::ZSS::Protocol::Point::default_instance());
  point2_ = const_cast< ::ZSS::Protocol::Point*>(&::ZSS::Protocol::Point::default_instance());
}

Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Rectangle)
}

void Rectangle::SharedCtor() {
  _cached_size_ = 0;
  point1_ = NULL;
  point2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
  if (this != default_instance_) {
    delete point1_;
    delete point2_;
  }
}

void Rectangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rectangle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rectangle_descriptor_;
}

const Rectangle& Rectangle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Rectangle* Rectangle::default_instance_ = NULL;

Rectangle* Rectangle::New() const {
  return new Rectangle;
}

void Rectangle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_point1()) {
      if (point1_ != NULL) point1_->::ZSS::Protocol::Point::Clear();
    }
    if (has_point2()) {
      if (point2_ != NULL) point2_->::ZSS::Protocol::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Rectangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZSS.Protocol.Point point1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_point2;
        break;
      }

      // required .ZSS.Protocol.Point point2 = 2;
      case 2: {
        if (tag == 18) {
         parse_point2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Rectangle)
  return false;
#undef DO_
}

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Rectangle)
  // required .ZSS.Protocol.Point point1 = 1;
  if (has_point1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point1(), output);
  }

  // required .ZSS.Protocol.Point point2 = 2;
  if (has_point2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Rectangle)
}

::google::protobuf::uint8* Rectangle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Rectangle)
  // required .ZSS.Protocol.Point point1 = 1;
  if (has_point1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point1(), target);
  }

  // required .ZSS.Protocol.Point point2 = 2;
  if (has_point2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Rectangle)
  return target;
}

int Rectangle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZSS.Protocol.Point point1 = 1;
    if (has_point1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point1());
    }

    // required .ZSS.Protocol.Point point2 = 2;
    if (has_point2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rectangle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rectangle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point1()) {
      mutable_point1()->::ZSS::Protocol::Point::MergeFrom(from.point1());
    }
    if (from.has_point2()) {
      mutable_point2()->::ZSS::Protocol::Point::MergeFrom(from.point2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_point1()) {
    if (!this->point1().IsInitialized()) return false;
  }
  if (has_point2()) {
    if (!this->point2().IsInitialized()) return false;
  }
  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other != this) {
    std::swap(point1_, other->point1_);
    std::swap(point2_, other->point2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rectangle_descriptor_;
  metadata.reflection = Rectangle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Robot::kPosFieldNumber;
const int Debug_Robot::kDirFieldNumber;
#endif  // !_MSC_VER

Debug_Robot::Debug_Robot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Robot)
}

void Debug_Robot::InitAsDefaultInstance() {
  pos_ = const_cast< ::ZSS::Protocol::Point*>(&::ZSS::Protocol::Point::default_instance());
}

Debug_Robot::Debug_Robot(const Debug_Robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Robot)
}

void Debug_Robot::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Robot::~Debug_Robot() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Robot)
  SharedDtor();
}

void Debug_Robot::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void Debug_Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Robot_descriptor_;
}

const Debug_Robot& Debug_Robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Debug_Robot* Debug_Robot::default_instance_ = NULL;

Debug_Robot* Debug_Robot::New() const {
  return new Debug_Robot;
}

void Debug_Robot::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::ZSS::Protocol::Point::Clear();
    }
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Robot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZSS.Protocol.Point pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_dir;
        break;
      }

      // required float dir = 2;
      case 2: {
        if (tag == 21) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Robot)
  return false;
#undef DO_
}

void Debug_Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Robot)
  // required .ZSS.Protocol.Point pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  // required float dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Robot)
}

::google::protobuf::uint8* Debug_Robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Robot)
  // required .ZSS.Protocol.Point pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  // required float dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Robot)
  return target;
}

int Debug_Robot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZSS.Protocol.Point pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required float dir = 2;
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Robot::MergeFrom(const Debug_Robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::ZSS::Protocol::Point::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Robot::CopyFrom(const Debug_Robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void Debug_Robot::Swap(Debug_Robot* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Robot_descriptor_;
  metadata.reflection = Debug_Robot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Line::kStartFieldNumber;
const int Debug_Line::kEndFieldNumber;
const int Debug_Line::kFORWARDFieldNumber;
const int Debug_Line::kBACKFieldNumber;
#endif  // !_MSC_VER

Debug_Line::Debug_Line()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Line)
}

void Debug_Line::InitAsDefaultInstance() {
  start_ = const_cast< ::ZSS::Protocol::Point*>(&::ZSS::Protocol::Point::default_instance());
  end_ = const_cast< ::ZSS::Protocol::Point*>(&::ZSS::Protocol::Point::default_instance());
}

Debug_Line::Debug_Line(const Debug_Line& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Line)
}

void Debug_Line::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  forward_ = false;
  back_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Line::~Debug_Line() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Line)
  SharedDtor();
}

void Debug_Line::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void Debug_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Line_descriptor_;
}

const Debug_Line& Debug_Line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Debug_Line* Debug_Line::default_instance_ = NULL;

Debug_Line* Debug_Line::New() const {
  return new Debug_Line;
}

void Debug_Line::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Debug_Line*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(forward_, back_);
    if (has_start()) {
      if (start_ != NULL) start_->::ZSS::Protocol::Point::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::ZSS::Protocol::Point::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZSS.Protocol.Point start = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // required .ZSS.Protocol.Point end = 2;
      case 2: {
        if (tag == 18) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FORWARD;
        break;
      }

      // required bool FORWARD = 3;
      case 3: {
        if (tag == 24) {
         parse_FORWARD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
          set_has_forward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BACK;
        break;
      }

      // required bool BACK = 4;
      case 4: {
        if (tag == 32) {
         parse_BACK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_)));
          set_has_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Line)
  return false;
#undef DO_
}

void Debug_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Line)
  // required .ZSS.Protocol.Point start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }

  // required .ZSS.Protocol.Point end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end(), output);
  }

  // required bool FORWARD = 3;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forward(), output);
  }

  // required bool BACK = 4;
  if (has_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->back(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Line)
}

::google::protobuf::uint8* Debug_Line::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Line)
  // required .ZSS.Protocol.Point start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }

  // required .ZSS.Protocol.Point end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end(), target);
  }

  // required bool FORWARD = 3;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forward(), target);
  }

  // required bool BACK = 4;
  if (has_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->back(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Line)
  return target;
}

int Debug_Line::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZSS.Protocol.Point start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // required .ZSS.Protocol.Point end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

    // required bool FORWARD = 3;
    if (has_forward()) {
      total_size += 1 + 1;
    }

    // required bool BACK = 4;
    if (has_back()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Line::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Line* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Line*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Line::MergeFrom(const Debug_Line& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::ZSS::Protocol::Point::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::ZSS::Protocol::Point::MergeFrom(from.end());
    }
    if (from.has_forward()) {
      set_forward(from.forward());
    }
    if (from.has_back()) {
      set_back(from.back());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Line::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Line::CopyFrom(const Debug_Line& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Line::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void Debug_Line::Swap(Debug_Line* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(forward_, other->forward_);
    std::swap(back_, other->back_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Line_descriptor_;
  metadata.reflection = Debug_Line_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Arc::kRectangleFieldNumber;
const int Debug_Arc::kStartFieldNumber;
const int Debug_Arc::kEndFieldNumber;
const int Debug_Arc::kFILLFieldNumber;
#endif  // !_MSC_VER

Debug_Arc::Debug_Arc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Arc)
}

void Debug_Arc::InitAsDefaultInstance() {
  rectangle_ = const_cast< ::ZSS::Protocol::Rectangle*>(&::ZSS::Protocol::Rectangle::default_instance());
}

Debug_Arc::Debug_Arc(const Debug_Arc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Arc)
}

void Debug_Arc::SharedCtor() {
  _cached_size_ = 0;
  rectangle_ = NULL;
  start_ = 0;
  end_ = 0;
  fill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Arc::~Debug_Arc() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Arc)
  SharedDtor();
}

void Debug_Arc::SharedDtor() {
  if (this != default_instance_) {
    delete rectangle_;
  }
}

void Debug_Arc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Arc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Arc_descriptor_;
}

const Debug_Arc& Debug_Arc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Debug_Arc* Debug_Arc::default_instance_ = NULL;

Debug_Arc* Debug_Arc::New() const {
  return new Debug_Arc;
}

void Debug_Arc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Debug_Arc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(start_, fill_);
    if (has_rectangle()) {
      if (rectangle_ != NULL) rectangle_->::ZSS::Protocol::Rectangle::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Arc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Arc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZSS.Protocol.Rectangle rectangle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rectangle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_start;
        break;
      }

      // required float start = 2;
      case 2: {
        if (tag == 21) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_end;
        break;
      }

      // required float end = 3;
      case 3: {
        if (tag == 29) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FILL;
        break;
      }

      // required bool FILL = 4;
      case 4: {
        if (tag == 32) {
         parse_FILL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
          set_has_fill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Arc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Arc)
  return false;
#undef DO_
}

void Debug_Arc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Arc)
  // required .ZSS.Protocol.Rectangle rectangle = 1;
  if (has_rectangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rectangle(), output);
  }

  // required float start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->start(), output);
  }

  // required float end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->end(), output);
  }

  // required bool FILL = 4;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Arc)
}

::google::protobuf::uint8* Debug_Arc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Arc)
  // required .ZSS.Protocol.Rectangle rectangle = 1;
  if (has_rectangle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rectangle(), target);
  }

  // required float start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->start(), target);
  }

  // required float end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->end(), target);
  }

  // required bool FILL = 4;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Arc)
  return target;
}

int Debug_Arc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZSS.Protocol.Rectangle rectangle = 1;
    if (has_rectangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rectangle());
    }

    // required float start = 2;
    if (has_start()) {
      total_size += 1 + 4;
    }

    // required float end = 3;
    if (has_end()) {
      total_size += 1 + 4;
    }

    // required bool FILL = 4;
    if (has_fill()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Arc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Arc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Arc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Arc::MergeFrom(const Debug_Arc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rectangle()) {
      mutable_rectangle()->::ZSS::Protocol::Rectangle::MergeFrom(from.rectangle());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_fill()) {
      set_fill(from.fill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Arc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Arc::CopyFrom(const Debug_Arc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Arc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_rectangle()) {
    if (!this->rectangle().IsInitialized()) return false;
  }
  return true;
}

void Debug_Arc::Swap(Debug_Arc* other) {
  if (other != this) {
    std::swap(rectangle_, other->rectangle_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(fill_, other->fill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Arc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Arc_descriptor_;
  metadata.reflection = Debug_Arc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Polygon::kVertexFieldNumber;
const int Debug_Polygon::kFILLFieldNumber;
#endif  // !_MSC_VER

Debug_Polygon::Debug_Polygon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Polygon)
}

void Debug_Polygon::InitAsDefaultInstance() {
}

Debug_Polygon::Debug_Polygon(const Debug_Polygon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Polygon)
}

void Debug_Polygon::SharedCtor() {
  _cached_size_ = 0;
  fill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Polygon::~Debug_Polygon() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Polygon)
  SharedDtor();
}

void Debug_Polygon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Debug_Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Polygon_descriptor_;
}

const Debug_Polygon& Debug_Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Debug_Polygon* Debug_Polygon::default_instance_ = NULL;

Debug_Polygon* Debug_Polygon::New() const {
  return new Debug_Polygon;
}

void Debug_Polygon::Clear() {
  fill_ = false;
  vertex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZSS.Protocol.Point vertex = 1;
      case 1: {
        if (tag == 10) {
         parse_vertex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_vertex;
        if (input->ExpectTag(16)) goto parse_FILL;
        break;
      }

      // required bool FILL = 2;
      case 2: {
        if (tag == 16) {
         parse_FILL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
          set_has_fill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Polygon)
  return false;
#undef DO_
}

void Debug_Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Polygon)
  // repeated .ZSS.Protocol.Point vertex = 1;
  for (int i = 0; i < this->vertex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertex(i), output);
  }

  // required bool FILL = 2;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Polygon)
}

::google::protobuf::uint8* Debug_Polygon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Polygon)
  // repeated .ZSS.Protocol.Point vertex = 1;
  for (int i = 0; i < this->vertex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vertex(i), target);
  }

  // required bool FILL = 2;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Polygon)
  return target;
}

int Debug_Polygon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool FILL = 2;
    if (has_fill()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ZSS.Protocol.Point vertex = 1;
  total_size += 1 * this->vertex_size();
  for (int i = 0; i < this->vertex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertex(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Polygon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Polygon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Polygon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Polygon::MergeFrom(const Debug_Polygon& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertex_.MergeFrom(from.vertex_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fill()) {
      set_fill(from.fill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Polygon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Polygon::CopyFrom(const Debug_Polygon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Polygon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->vertex())) return false;
  return true;
}

void Debug_Polygon::Swap(Debug_Polygon* other) {
  if (other != this) {
    vertex_.Swap(&other->vertex_);
    std::swap(fill_, other->fill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Polygon_descriptor_;
  metadata.reflection = Debug_Polygon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Text::kPosFieldNumber;
const int Debug_Text::kTextFieldNumber;
#endif  // !_MSC_VER

Debug_Text::Debug_Text()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Text)
}

void Debug_Text::InitAsDefaultInstance() {
  pos_ = const_cast< ::ZSS::Protocol::Point*>(&::ZSS::Protocol::Point::default_instance());
}

Debug_Text::Debug_Text(const Debug_Text& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Text)
}

void Debug_Text::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pos_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Text::~Debug_Text() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Text)
  SharedDtor();
}

void Debug_Text::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void Debug_Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Text_descriptor_;
}

const Debug_Text& Debug_Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Debug_Text* Debug_Text::default_instance_ = NULL;

Debug_Text* Debug_Text::New() const {
  return new Debug_Text;
}

void Debug_Text::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::ZSS::Protocol::Point::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZSS.Protocol.Point pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // required string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Text)
  return false;
#undef DO_
}

void Debug_Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Text)
  // required .ZSS.Protocol.Point pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  // required string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Text)
}

::google::protobuf::uint8* Debug_Text::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Text)
  // required .ZSS.Protocol.Point pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  // required string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Text)
  return target;
}

int Debug_Text::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZSS.Protocol.Point pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Text::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Text* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Text*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Text::MergeFrom(const Debug_Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::ZSS::Protocol::Point::MergeFrom(from.pos());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Text::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Text::CopyFrom(const Debug_Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void Debug_Text::Swap(Debug_Text* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Text_descriptor_;
  metadata.reflection = Debug_Text_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Curve_::kNumFieldNumber;
const int Debug_Curve_::kMaxLimitFieldNumber;
const int Debug_Curve_::kMinLimitFieldNumber;
#endif  // !_MSC_VER

Debug_Curve_::Debug_Curve_()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Curve_)
}

void Debug_Curve_::InitAsDefaultInstance() {
}

Debug_Curve_::Debug_Curve_(const Debug_Curve_& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Curve_)
}

void Debug_Curve_::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  maxlimit_ = 0;
  minlimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Curve_::~Debug_Curve_() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Curve_)
  SharedDtor();
}

void Debug_Curve_::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Debug_Curve_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Curve_::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Curve__descriptor_;
}

const Debug_Curve_& Debug_Curve_::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Debug_Curve_* Debug_Curve_::default_instance_ = NULL;

Debug_Curve_* Debug_Curve_::New() const {
  return new Debug_Curve_;
}

void Debug_Curve_::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Debug_Curve_*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_, minlimit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Curve_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Curve_)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float num = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_maxLimit;
        break;
      }

      // required float maxLimit = 2;
      case 2: {
        if (tag == 21) {
         parse_maxLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxlimit_)));
          set_has_maxlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_minLimit;
        break;
      }

      // required float minLimit = 3;
      case 3: {
        if (tag == 29) {
         parse_minLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minlimit_)));
          set_has_minlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Curve_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Curve_)
  return false;
#undef DO_
}

void Debug_Curve_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Curve_)
  // required float num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->num(), output);
  }

  // required float maxLimit = 2;
  if (has_maxlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxlimit(), output);
  }

  // required float minLimit = 3;
  if (has_minlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minlimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Curve_)
}

::google::protobuf::uint8* Debug_Curve_::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Curve_)
  // required float num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->num(), target);
  }

  // required float maxLimit = 2;
  if (has_maxlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxlimit(), target);
  }

  // required float minLimit = 3;
  if (has_minlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->minlimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Curve_)
  return target;
}

int Debug_Curve_::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float num = 1;
    if (has_num()) {
      total_size += 1 + 4;
    }

    // required float maxLimit = 2;
    if (has_maxlimit()) {
      total_size += 1 + 4;
    }

    // required float minLimit = 3;
    if (has_minlimit()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Curve_::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Curve_* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Curve_*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Curve_::MergeFrom(const Debug_Curve_& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_maxlimit()) {
      set_maxlimit(from.maxlimit());
    }
    if (from.has_minlimit()) {
      set_minlimit(from.minlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Curve_::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Curve_::CopyFrom(const Debug_Curve_& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Curve_::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Debug_Curve_::Swap(Debug_Curve_* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(maxlimit_, other->maxlimit_);
    std::swap(minlimit_, other->minlimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Curve_::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Curve__descriptor_;
  metadata.reflection = Debug_Curve__reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Curve::kStartFieldNumber;
const int Debug_Curve::kP1FieldNumber;
const int Debug_Curve::kP2FieldNumber;
const int Debug_Curve::kEndFieldNumber;
#endif  // !_MSC_VER

Debug_Curve::Debug_Curve()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Curve)
}

void Debug_Curve::InitAsDefaultInstance() {
  start_ = const_cast< ::ZSS::Protocol::Point*>(&::ZSS::Protocol::Point::default_instance());
  p1_ = const_cast< ::ZSS::Protocol::Point*>(&::ZSS::Protocol::Point::default_instance());
  p2_ = const_cast< ::ZSS::Protocol::Point*>(&::ZSS::Protocol::Point::default_instance());
  end_ = const_cast< ::ZSS::Protocol::Point*>(&::ZSS::Protocol::Point::default_instance());
}

Debug_Curve::Debug_Curve(const Debug_Curve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Curve)
}

void Debug_Curve::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  p1_ = NULL;
  p2_ = NULL;
  end_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Curve::~Debug_Curve() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Curve)
  SharedDtor();
}

void Debug_Curve::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete p1_;
    delete p2_;
    delete end_;
  }
}

void Debug_Curve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Curve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Curve_descriptor_;
}

const Debug_Curve& Debug_Curve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Debug_Curve* Debug_Curve::default_instance_ = NULL;

Debug_Curve* Debug_Curve::New() const {
  return new Debug_Curve;
}

void Debug_Curve::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_start()) {
      if (start_ != NULL) start_->::ZSS::Protocol::Point::Clear();
    }
    if (has_p1()) {
      if (p1_ != NULL) p1_->::ZSS::Protocol::Point::Clear();
    }
    if (has_p2()) {
      if (p2_ != NULL) p2_->::ZSS::Protocol::Point::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::ZSS::Protocol::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Curve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Curve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZSS.Protocol.Point start = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_p1;
        break;
      }

      // required .ZSS.Protocol.Point p1 = 2;
      case 2: {
        if (tag == 18) {
         parse_p1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_p2;
        break;
      }

      // required .ZSS.Protocol.Point p2 = 3;
      case 3: {
        if (tag == 26) {
         parse_p2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end;
        break;
      }

      // required .ZSS.Protocol.Point end = 4;
      case 4: {
        if (tag == 34) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Curve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Curve)
  return false;
#undef DO_
}

void Debug_Curve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Curve)
  // required .ZSS.Protocol.Point start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }

  // required .ZSS.Protocol.Point p1 = 2;
  if (has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->p1(), output);
  }

  // required .ZSS.Protocol.Point p2 = 3;
  if (has_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->p2(), output);
  }

  // required .ZSS.Protocol.Point end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Curve)
}

::google::protobuf::uint8* Debug_Curve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Curve)
  // required .ZSS.Protocol.Point start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }

  // required .ZSS.Protocol.Point p1 = 2;
  if (has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->p1(), target);
  }

  // required .ZSS.Protocol.Point p2 = 3;
  if (has_p2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->p2(), target);
  }

  // required .ZSS.Protocol.Point end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Curve)
  return target;
}

int Debug_Curve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZSS.Protocol.Point start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // required .ZSS.Protocol.Point p1 = 2;
    if (has_p1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p1());
    }

    // required .ZSS.Protocol.Point p2 = 3;
    if (has_p2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p2());
    }

    // required .ZSS.Protocol.Point end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Curve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Curve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Curve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Curve::MergeFrom(const Debug_Curve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::ZSS::Protocol::Point::MergeFrom(from.start());
    }
    if (from.has_p1()) {
      mutable_p1()->::ZSS::Protocol::Point::MergeFrom(from.p1());
    }
    if (from.has_p2()) {
      mutable_p2()->::ZSS::Protocol::Point::MergeFrom(from.p2());
    }
    if (from.has_end()) {
      mutable_end()->::ZSS::Protocol::Point::MergeFrom(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Curve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Curve::CopyFrom(const Debug_Curve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Curve::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  if (has_p1()) {
    if (!this->p1().IsInitialized()) return false;
  }
  if (has_p2()) {
    if (!this->p2().IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void Debug_Curve::Swap(Debug_Curve* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(p1_, other->p1_);
    std::swap(p2_, other->p2_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Curve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Curve_descriptor_;
  metadata.reflection = Debug_Curve_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Debug_Msg_Debug_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Msg_Debug_Type_descriptor_;
}
bool Debug_Msg_Debug_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Debug_Msg_Debug_Type Debug_Msg::ARC;
const Debug_Msg_Debug_Type Debug_Msg::LINE;
const Debug_Msg_Debug_Type Debug_Msg::TEXT;
const Debug_Msg_Debug_Type Debug_Msg::ROBOT;
const Debug_Msg_Debug_Type Debug_Msg::CURVE;
const Debug_Msg_Debug_Type Debug_Msg::POLYGON;
const Debug_Msg_Debug_Type Debug_Msg::Debug_Type_MIN;
const Debug_Msg_Debug_Type Debug_Msg::Debug_Type_MAX;
const int Debug_Msg::Debug_Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Debug_Msg_Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Msg_Color_descriptor_;
}
bool Debug_Msg_Color_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Debug_Msg_Color Debug_Msg::WHITE;
const Debug_Msg_Color Debug_Msg::RED;
const Debug_Msg_Color Debug_Msg::ORANGE;
const Debug_Msg_Color Debug_Msg::YELLOW;
const Debug_Msg_Color Debug_Msg::GREEN;
const Debug_Msg_Color Debug_Msg::CYAN;
const Debug_Msg_Color Debug_Msg::BLUE;
const Debug_Msg_Color Debug_Msg::PURPLE;
const Debug_Msg_Color Debug_Msg::GRAY;
const Debug_Msg_Color Debug_Msg::BLACK;
const Debug_Msg_Color Debug_Msg::Color_MIN;
const Debug_Msg_Color Debug_Msg::Color_MAX;
const int Debug_Msg::Color_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Debug_Msg::kTypeFieldNumber;
const int Debug_Msg::kColorFieldNumber;
const int Debug_Msg::kArcFieldNumber;
const int Debug_Msg::kLineFieldNumber;
const int Debug_Msg::kTextFieldNumber;
const int Debug_Msg::kRobotFieldNumber;
const int Debug_Msg::kCurveFieldNumber;
const int Debug_Msg::kPolygonFieldNumber;
#endif  // !_MSC_VER

Debug_Msg::Debug_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Msg)
}

void Debug_Msg::InitAsDefaultInstance() {
  arc_ = const_cast< ::ZSS::Protocol::Debug_Arc*>(&::ZSS::Protocol::Debug_Arc::default_instance());
  line_ = const_cast< ::ZSS::Protocol::Debug_Line*>(&::ZSS::Protocol::Debug_Line::default_instance());
  text_ = const_cast< ::ZSS::Protocol::Debug_Text*>(&::ZSS::Protocol::Debug_Text::default_instance());
  robot_ = const_cast< ::ZSS::Protocol::Debug_Robot*>(&::ZSS::Protocol::Debug_Robot::default_instance());
  curve_ = const_cast< ::ZSS::Protocol::Debug_Curve_*>(&::ZSS::Protocol::Debug_Curve_::default_instance());
  polygon_ = const_cast< ::ZSS::Protocol::Debug_Polygon*>(&::ZSS::Protocol::Debug_Polygon::default_instance());
}

Debug_Msg::Debug_Msg(const Debug_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Msg)
}

void Debug_Msg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  color_ = 0;
  arc_ = NULL;
  line_ = NULL;
  text_ = NULL;
  robot_ = NULL;
  curve_ = NULL;
  polygon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Msg::~Debug_Msg() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Msg)
  SharedDtor();
}

void Debug_Msg::SharedDtor() {
  if (this != default_instance_) {
    delete arc_;
    delete line_;
    delete text_;
    delete robot_;
    delete curve_;
    delete polygon_;
  }
}

void Debug_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Msg_descriptor_;
}

const Debug_Msg& Debug_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Debug_Msg* Debug_Msg::default_instance_ = NULL;

Debug_Msg* Debug_Msg::New() const {
  return new Debug_Msg;
}

void Debug_Msg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Debug_Msg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, color_);
    if (has_arc()) {
      if (arc_ != NULL) arc_->::ZSS::Protocol::Debug_Arc::Clear();
    }
    if (has_line()) {
      if (line_ != NULL) line_->::ZSS::Protocol::Debug_Line::Clear();
    }
    if (has_text()) {
      if (text_ != NULL) text_->::ZSS::Protocol::Debug_Text::Clear();
    }
    if (has_robot()) {
      if (robot_ != NULL) robot_->::ZSS::Protocol::Debug_Robot::Clear();
    }
    if (has_curve()) {
      if (curve_ != NULL) curve_->::ZSS::Protocol::Debug_Curve_::Clear();
    }
    if (has_polygon()) {
      if (polygon_ != NULL) polygon_->::ZSS::Protocol::Debug_Polygon::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ZSS::Protocol::Debug_Msg_Debug_Type_IsValid(value)) {
            set_type(static_cast< ::ZSS::Protocol::Debug_Msg_Debug_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // required .ZSS.Protocol.Debug_Msg.Color color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ZSS::Protocol::Debug_Msg_Color_IsValid(value)) {
            set_color(static_cast< ::ZSS::Protocol::Debug_Msg_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_arc;
        break;
      }

      // optional .ZSS.Protocol.Debug_Arc arc = 3;
      case 3: {
        if (tag == 26) {
         parse_arc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_line;
        break;
      }

      // optional .ZSS.Protocol.Debug_Line line = 4;
      case 4: {
        if (tag == 34) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional .ZSS.Protocol.Debug_Text text = 5;
      case 5: {
        if (tag == 42) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_robot;
        break;
      }

      // optional .ZSS.Protocol.Debug_Robot robot = 6;
      case 6: {
        if (tag == 50) {
         parse_robot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_curve;
        break;
      }

      // optional .ZSS.Protocol.Debug_Curve_ curve = 7;
      case 7: {
        if (tag == 58) {
         parse_curve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_polygon;
        break;
      }

      // optional .ZSS.Protocol.Debug_Polygon polygon = 8;
      case 8: {
        if (tag == 66) {
         parse_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Msg)
  return false;
#undef DO_
}

void Debug_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Msg)
  // required .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .ZSS.Protocol.Debug_Msg.Color color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // optional .ZSS.Protocol.Debug_Arc arc = 3;
  if (has_arc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arc(), output);
  }

  // optional .ZSS.Protocol.Debug_Line line = 4;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->line(), output);
  }

  // optional .ZSS.Protocol.Debug_Text text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->text(), output);
  }

  // optional .ZSS.Protocol.Debug_Robot robot = 6;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->robot(), output);
  }

  // optional .ZSS.Protocol.Debug_Curve_ curve = 7;
  if (has_curve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->curve(), output);
  }

  // optional .ZSS.Protocol.Debug_Polygon polygon = 8;
  if (has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->polygon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Msg)
}

::google::protobuf::uint8* Debug_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Msg)
  // required .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .ZSS.Protocol.Debug_Msg.Color color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // optional .ZSS.Protocol.Debug_Arc arc = 3;
  if (has_arc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arc(), target);
  }

  // optional .ZSS.Protocol.Debug_Line line = 4;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->line(), target);
  }

  // optional .ZSS.Protocol.Debug_Text text = 5;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->text(), target);
  }

  // optional .ZSS.Protocol.Debug_Robot robot = 6;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->robot(), target);
  }

  // optional .ZSS.Protocol.Debug_Curve_ curve = 7;
  if (has_curve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->curve(), target);
  }

  // optional .ZSS.Protocol.Debug_Polygon polygon = 8;
  if (has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->polygon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Msg)
  return target;
}

int Debug_Msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .ZSS.Protocol.Debug_Msg.Color color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional .ZSS.Protocol.Debug_Arc arc = 3;
    if (has_arc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arc());
    }

    // optional .ZSS.Protocol.Debug_Line line = 4;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }

    // optional .ZSS.Protocol.Debug_Text text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

    // optional .ZSS.Protocol.Debug_Robot robot = 6;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robot());
    }

    // optional .ZSS.Protocol.Debug_Curve_ curve = 7;
    if (has_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curve());
    }

    // optional .ZSS.Protocol.Debug_Polygon polygon = 8;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Msg::MergeFrom(const Debug_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_arc()) {
      mutable_arc()->::ZSS::Protocol::Debug_Arc::MergeFrom(from.arc());
    }
    if (from.has_line()) {
      mutable_line()->::ZSS::Protocol::Debug_Line::MergeFrom(from.line());
    }
    if (from.has_text()) {
      mutable_text()->::ZSS::Protocol::Debug_Text::MergeFrom(from.text());
    }
    if (from.has_robot()) {
      mutable_robot()->::ZSS::Protocol::Debug_Robot::MergeFrom(from.robot());
    }
    if (from.has_curve()) {
      mutable_curve()->::ZSS::Protocol::Debug_Curve_::MergeFrom(from.curve());
    }
    if (from.has_polygon()) {
      mutable_polygon()->::ZSS::Protocol::Debug_Polygon::MergeFrom(from.polygon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Msg::CopyFrom(const Debug_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_arc()) {
    if (!this->arc().IsInitialized()) return false;
  }
  if (has_line()) {
    if (!this->line().IsInitialized()) return false;
  }
  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  if (has_robot()) {
    if (!this->robot().IsInitialized()) return false;
  }
  if (has_curve()) {
    if (!this->curve().IsInitialized()) return false;
  }
  if (has_polygon()) {
    if (!this->polygon().IsInitialized()) return false;
  }
  return true;
}

void Debug_Msg::Swap(Debug_Msg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(color_, other->color_);
    std::swap(arc_, other->arc_);
    std::swap(line_, other->line_);
    std::swap(text_, other->text_);
    std::swap(robot_, other->robot_);
    std::swap(curve_, other->curve_);
    std::swap(polygon_, other->polygon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Msg_descriptor_;
  metadata.reflection = Debug_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Msgs::kMsgsFieldNumber;
#endif  // !_MSC_VER

Debug_Msgs::Debug_Msgs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Msgs)
}

void Debug_Msgs::InitAsDefaultInstance() {
}

Debug_Msgs::Debug_Msgs(const Debug_Msgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Msgs)
}

void Debug_Msgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Msgs::~Debug_Msgs() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Msgs)
  SharedDtor();
}

void Debug_Msgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Debug_Msgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Msgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Msgs_descriptor_;
}

const Debug_Msgs& Debug_Msgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fdebug_2eproto();
  return *default_instance_;
}

Debug_Msgs* Debug_Msgs::default_instance_ = NULL;

Debug_Msgs* Debug_Msgs::New() const {
  return new Debug_Msgs;
}

void Debug_Msgs::Clear() {
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Msgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Msgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZSS.Protocol.Debug_Msg msgs = 1;
      case 1: {
        if (tag == 10) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msgs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Msgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Msgs)
  return false;
#undef DO_
}

void Debug_Msgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Msgs)
  // repeated .ZSS.Protocol.Debug_Msg msgs = 1;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Msgs)
}

::google::protobuf::uint8* Debug_Msgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Msgs)
  // repeated .ZSS.Protocol.Debug_Msg msgs = 1;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Msgs)
  return target;
}

int Debug_Msgs::ByteSize() const {
  int total_size = 0;

  // repeated .ZSS.Protocol.Debug_Msg msgs = 1;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Msgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Msgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Msgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Msgs::MergeFrom(const Debug_Msgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Msgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Msgs::CopyFrom(const Debug_Msgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Msgs::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->msgs())) return false;
  return true;
}

void Debug_Msgs::Swap(Debug_Msgs* other) {
  if (other != this) {
    msgs_.Swap(&other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Msgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Msgs_descriptor_;
  metadata.reflection = Debug_Msgs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace ZSS

// @@protoc_insertion_point(global_scope)
