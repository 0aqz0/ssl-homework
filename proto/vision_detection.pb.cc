// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_detection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vision_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Vision_DetectionBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vision_DetectionBall_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vision_DetectionRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vision_DetectionRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vision_DetectionFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vision_DetectionFrame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vision_5fdetection_2eproto() {
  protobuf_AddDesc_vision_5fdetection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vision_detection.proto");
  GOOGLE_CHECK(file != NULL);
  Vision_DetectionBall_descriptor_ = file->message_type(0);
  static const int Vision_DetectionBall_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, vel_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, vel_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, ball_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, last_touch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, valid_),
  };
  Vision_DetectionBall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vision_DetectionBall_descriptor_,
      Vision_DetectionBall::default_instance_,
      Vision_DetectionBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vision_DetectionBall));
  Vision_DetectionRobot_descriptor_ = file->message_type(1);
  static const int Vision_DetectionRobot_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, vel_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, vel_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, rotate_vel_),
  };
  Vision_DetectionRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vision_DetectionRobot_descriptor_,
      Vision_DetectionRobot::default_instance_,
      Vision_DetectionRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vision_DetectionRobot));
  Vision_DetectionFrame_descriptor_ = file->message_type(2);
  static const int Vision_DetectionFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionFrame, balls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionFrame, robots_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionFrame, robots_blue_),
  };
  Vision_DetectionFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vision_DetectionFrame_descriptor_,
      Vision_DetectionFrame::default_instance_,
      Vision_DetectionFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vision_DetectionFrame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vision_5fdetection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vision_DetectionBall_descriptor_, &Vision_DetectionBall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vision_DetectionRobot_descriptor_, &Vision_DetectionRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vision_DetectionFrame_descriptor_, &Vision_DetectionFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vision_5fdetection_2eproto() {
  delete Vision_DetectionBall::default_instance_;
  delete Vision_DetectionBall_reflection_;
  delete Vision_DetectionRobot::default_instance_;
  delete Vision_DetectionRobot_reflection_;
  delete Vision_DetectionFrame::default_instance_;
  delete Vision_DetectionFrame_reflection_;
}

void protobuf_AddDesc_vision_5fdetection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026vision_detection.proto\"\237\001\n\024Vision_Dete"
    "ctionBall\022\r\n\005vel_x\030\001 \001(\002\022\r\n\005vel_y\030\002 \001(\002\022"
    "\014\n\004area\030\003 \001(\r\022\t\n\001x\030\004 \002(\002\022\t\n\001y\030\005 \002(\002\022\016\n\006h"
    "eight\030\006 \001(\002\022\022\n\nball_state\030\007 \001(\r\022\022\n\nlast_"
    "touch\030\010 \001(\r\022\r\n\005valid\030\t \002(\010\"\232\001\n\025Vision_De"
    "tectionRobot\022\022\n\nconfidence\030\001 \002(\002\022\020\n\010robo"
    "t_id\030\002 \001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\023\n\013orie"
    "ntation\030\005 \001(\002\022\r\n\005vel_x\030\006 \001(\002\022\r\n\005vel_y\030\007 "
    "\001(\002\022\022\n\nrotate_vel\030\010 \001(\002\"\231\001\n\025Vision_Detec"
    "tionFrame\022$\n\005balls\030\001 \002(\0132\025.Vision_Detect"
    "ionBall\022-\n\rrobots_yellow\030\002 \003(\0132\026.Vision_"
    "DetectionRobot\022+\n\013robots_blue\030\003 \003(\0132\026.Vi"
    "sion_DetectionRobot", 499);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vision_detection.proto", &protobuf_RegisterTypes);
  Vision_DetectionBall::default_instance_ = new Vision_DetectionBall();
  Vision_DetectionRobot::default_instance_ = new Vision_DetectionRobot();
  Vision_DetectionFrame::default_instance_ = new Vision_DetectionFrame();
  Vision_DetectionBall::default_instance_->InitAsDefaultInstance();
  Vision_DetectionRobot::default_instance_->InitAsDefaultInstance();
  Vision_DetectionFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vision_5fdetection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vision_5fdetection_2eproto {
  StaticDescriptorInitializer_vision_5fdetection_2eproto() {
    protobuf_AddDesc_vision_5fdetection_2eproto();
  }
} static_descriptor_initializer_vision_5fdetection_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vision_DetectionBall::kVelXFieldNumber;
const int Vision_DetectionBall::kVelYFieldNumber;
const int Vision_DetectionBall::kAreaFieldNumber;
const int Vision_DetectionBall::kXFieldNumber;
const int Vision_DetectionBall::kYFieldNumber;
const int Vision_DetectionBall::kHeightFieldNumber;
const int Vision_DetectionBall::kBallStateFieldNumber;
const int Vision_DetectionBall::kLastTouchFieldNumber;
const int Vision_DetectionBall::kValidFieldNumber;
#endif  // !_MSC_VER

Vision_DetectionBall::Vision_DetectionBall()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_DetectionBall)
}

void Vision_DetectionBall::InitAsDefaultInstance() {
}

Vision_DetectionBall::Vision_DetectionBall(const Vision_DetectionBall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionBall)
}

void Vision_DetectionBall::SharedCtor() {
  _cached_size_ = 0;
  vel_x_ = 0;
  vel_y_ = 0;
  area_ = 0u;
  x_ = 0;
  y_ = 0;
  height_ = 0;
  ball_state_ = 0u;
  last_touch_ = 0u;
  valid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vision_DetectionBall::~Vision_DetectionBall() {
  // @@protoc_insertion_point(destructor:Vision_DetectionBall)
  SharedDtor();
}

void Vision_DetectionBall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vision_DetectionBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vision_DetectionBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vision_DetectionBall_descriptor_;
}

const Vision_DetectionBall& Vision_DetectionBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fdetection_2eproto();
  return *default_instance_;
}

Vision_DetectionBall* Vision_DetectionBall::default_instance_ = NULL;

Vision_DetectionBall* Vision_DetectionBall::New() const {
  return new Vision_DetectionBall;
}

void Vision_DetectionBall::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vision_DetectionBall*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(vel_x_, last_touch_);
  }
  valid_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vision_DetectionBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vision_DetectionBall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float vel_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_x_)));
          set_has_vel_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_vel_y;
        break;
      }

      // optional float vel_y = 2;
      case 2: {
        if (tag == 21) {
         parse_vel_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_y_)));
          set_has_vel_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_area;
        break;
      }

      // optional uint32 area = 3;
      case 3: {
        if (tag == 24) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }

      // required float x = 4;
      case 4: {
        if (tag == 37) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }

      // required float y = 5;
      case 5: {
        if (tag == 45) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_height;
        break;
      }

      // optional float height = 6;
      case 6: {
        if (tag == 53) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ball_state;
        break;
      }

      // optional uint32 ball_state = 7;
      case 7: {
        if (tag == 56) {
         parse_ball_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ball_state_)));
          set_has_ball_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_touch;
        break;
      }

      // optional uint32 last_touch = 8;
      case 8: {
        if (tag == 64) {
         parse_last_touch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_touch_)));
          set_has_last_touch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_valid;
        break;
      }

      // required bool valid = 9;
      case 9: {
        if (tag == 72) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vision_DetectionBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vision_DetectionBall)
  return false;
#undef DO_
}

void Vision_DetectionBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vision_DetectionBall)
  // optional float vel_x = 1;
  if (has_vel_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->vel_x(), output);
  }

  // optional float vel_y = 2;
  if (has_vel_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->vel_y(), output);
  }

  // optional uint32 area = 3;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area(), output);
  }

  // required float x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // required float y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->height(), output);
  }

  // optional uint32 ball_state = 7;
  if (has_ball_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ball_state(), output);
  }

  // optional uint32 last_touch = 8;
  if (has_last_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_touch(), output);
  }

  // required bool valid = 9;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->valid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vision_DetectionBall)
}

::google::protobuf::uint8* Vision_DetectionBall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionBall)
  // optional float vel_x = 1;
  if (has_vel_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->vel_x(), target);
  }

  // optional float vel_y = 2;
  if (has_vel_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->vel_y(), target);
  }

  // optional uint32 area = 3;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area(), target);
  }

  // required float x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // required float y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float height = 6;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->height(), target);
  }

  // optional uint32 ball_state = 7;
  if (has_ball_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ball_state(), target);
  }

  // optional uint32 last_touch = 8;
  if (has_last_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_touch(), target);
  }

  // required bool valid = 9;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->valid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionBall)
  return target;
}

int Vision_DetectionBall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float vel_x = 1;
    if (has_vel_x()) {
      total_size += 1 + 4;
    }

    // optional float vel_y = 2;
    if (has_vel_y()) {
      total_size += 1 + 4;
    }

    // optional uint32 area = 3;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

    // required float x = 4;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 5;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float height = 6;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional uint32 ball_state = 7;
    if (has_ball_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ball_state());
    }

    // optional uint32 last_touch = 8;
    if (has_last_touch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_touch());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool valid = 9;
    if (has_valid()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vision_DetectionBall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vision_DetectionBall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vision_DetectionBall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vision_DetectionBall::MergeFrom(const Vision_DetectionBall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vel_x()) {
      set_vel_x(from.vel_x());
    }
    if (from.has_vel_y()) {
      set_vel_y(from.vel_y());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_ball_state()) {
      set_ball_state(from.ball_state());
    }
    if (from.has_last_touch()) {
      set_last_touch(from.last_touch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_valid()) {
      set_valid(from.valid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vision_DetectionBall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_DetectionBall::CopyFrom(const Vision_DetectionBall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000118) != 0x00000118) return false;

  return true;
}

void Vision_DetectionBall::Swap(Vision_DetectionBall* other) {
  if (other != this) {
    std::swap(vel_x_, other->vel_x_);
    std::swap(vel_y_, other->vel_y_);
    std::swap(area_, other->area_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(height_, other->height_);
    std::swap(ball_state_, other->ball_state_);
    std::swap(last_touch_, other->last_touch_);
    std::swap(valid_, other->valid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vision_DetectionBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vision_DetectionBall_descriptor_;
  metadata.reflection = Vision_DetectionBall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vision_DetectionRobot::kConfidenceFieldNumber;
const int Vision_DetectionRobot::kRobotIdFieldNumber;
const int Vision_DetectionRobot::kXFieldNumber;
const int Vision_DetectionRobot::kYFieldNumber;
const int Vision_DetectionRobot::kOrientationFieldNumber;
const int Vision_DetectionRobot::kVelXFieldNumber;
const int Vision_DetectionRobot::kVelYFieldNumber;
const int Vision_DetectionRobot::kRotateVelFieldNumber;
#endif  // !_MSC_VER

Vision_DetectionRobot::Vision_DetectionRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_DetectionRobot)
}

void Vision_DetectionRobot::InitAsDefaultInstance() {
}

Vision_DetectionRobot::Vision_DetectionRobot(const Vision_DetectionRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionRobot)
}

void Vision_DetectionRobot::SharedCtor() {
  _cached_size_ = 0;
  confidence_ = 0;
  robot_id_ = 0u;
  x_ = 0;
  y_ = 0;
  orientation_ = 0;
  vel_x_ = 0;
  vel_y_ = 0;
  rotate_vel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vision_DetectionRobot::~Vision_DetectionRobot() {
  // @@protoc_insertion_point(destructor:Vision_DetectionRobot)
  SharedDtor();
}

void Vision_DetectionRobot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vision_DetectionRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vision_DetectionRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vision_DetectionRobot_descriptor_;
}

const Vision_DetectionRobot& Vision_DetectionRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fdetection_2eproto();
  return *default_instance_;
}

Vision_DetectionRobot* Vision_DetectionRobot::default_instance_ = NULL;

Vision_DetectionRobot* Vision_DetectionRobot::New() const {
  return new Vision_DetectionRobot;
}

void Vision_DetectionRobot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vision_DetectionRobot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confidence_, rotate_vel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vision_DetectionRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vision_DetectionRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float confidence = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_robot_id;
        break;
      }

      // optional uint32 robot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_robot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
          set_has_robot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // required float x = 3;
      case 3: {
        if (tag == 29) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // required float y = 4;
      case 4: {
        if (tag == 37) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_orientation;
        break;
      }

      // optional float orientation = 5;
      case 5: {
        if (tag == 45) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_vel_x;
        break;
      }

      // optional float vel_x = 6;
      case 6: {
        if (tag == 53) {
         parse_vel_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_x_)));
          set_has_vel_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_vel_y;
        break;
      }

      // optional float vel_y = 7;
      case 7: {
        if (tag == 61) {
         parse_vel_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_y_)));
          set_has_vel_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_rotate_vel;
        break;
      }

      // optional float rotate_vel = 8;
      case 8: {
        if (tag == 69) {
         parse_rotate_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotate_vel_)));
          set_has_rotate_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vision_DetectionRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vision_DetectionRobot)
  return false;
#undef DO_
}

void Vision_DetectionRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vision_DetectionRobot)
  // required float confidence = 1;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // optional uint32 robot_id = 2;
  if (has_robot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robot_id(), output);
  }

  // required float x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // required float y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->orientation(), output);
  }

  // optional float vel_x = 6;
  if (has_vel_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vel_x(), output);
  }

  // optional float vel_y = 7;
  if (has_vel_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vel_y(), output);
  }

  // optional float rotate_vel = 8;
  if (has_rotate_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rotate_vel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vision_DetectionRobot)
}

::google::protobuf::uint8* Vision_DetectionRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionRobot)
  // required float confidence = 1;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // optional uint32 robot_id = 2;
  if (has_robot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_id(), target);
  }

  // required float x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // required float y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float orientation = 5;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->orientation(), target);
  }

  // optional float vel_x = 6;
  if (has_vel_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vel_x(), target);
  }

  // optional float vel_y = 7;
  if (has_vel_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vel_y(), target);
  }

  // optional float rotate_vel = 8;
  if (has_rotate_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rotate_vel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionRobot)
  return target;
}

int Vision_DetectionRobot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float confidence = 1;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional uint32 robot_id = 2;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robot_id());
    }

    // required float x = 3;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 4;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float orientation = 5;
    if (has_orientation()) {
      total_size += 1 + 4;
    }

    // optional float vel_x = 6;
    if (has_vel_x()) {
      total_size += 1 + 4;
    }

    // optional float vel_y = 7;
    if (has_vel_y()) {
      total_size += 1 + 4;
    }

    // optional float rotate_vel = 8;
    if (has_rotate_vel()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vision_DetectionRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vision_DetectionRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vision_DetectionRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vision_DetectionRobot::MergeFrom(const Vision_DetectionRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_robot_id()) {
      set_robot_id(from.robot_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_vel_x()) {
      set_vel_x(from.vel_x());
    }
    if (from.has_vel_y()) {
      set_vel_y(from.vel_y());
    }
    if (from.has_rotate_vel()) {
      set_rotate_vel(from.rotate_vel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vision_DetectionRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_DetectionRobot::CopyFrom(const Vision_DetectionRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionRobot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void Vision_DetectionRobot::Swap(Vision_DetectionRobot* other) {
  if (other != this) {
    std::swap(confidence_, other->confidence_);
    std::swap(robot_id_, other->robot_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(orientation_, other->orientation_);
    std::swap(vel_x_, other->vel_x_);
    std::swap(vel_y_, other->vel_y_);
    std::swap(rotate_vel_, other->rotate_vel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vision_DetectionRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vision_DetectionRobot_descriptor_;
  metadata.reflection = Vision_DetectionRobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vision_DetectionFrame::kBallsFieldNumber;
const int Vision_DetectionFrame::kRobotsYellowFieldNumber;
const int Vision_DetectionFrame::kRobotsBlueFieldNumber;
#endif  // !_MSC_VER

Vision_DetectionFrame::Vision_DetectionFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_DetectionFrame)
}

void Vision_DetectionFrame::InitAsDefaultInstance() {
  balls_ = const_cast< ::Vision_DetectionBall*>(&::Vision_DetectionBall::default_instance());
}

Vision_DetectionFrame::Vision_DetectionFrame(const Vision_DetectionFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionFrame)
}

void Vision_DetectionFrame::SharedCtor() {
  _cached_size_ = 0;
  balls_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vision_DetectionFrame::~Vision_DetectionFrame() {
  // @@protoc_insertion_point(destructor:Vision_DetectionFrame)
  SharedDtor();
}

void Vision_DetectionFrame::SharedDtor() {
  if (this != default_instance_) {
    delete balls_;
  }
}

void Vision_DetectionFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vision_DetectionFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vision_DetectionFrame_descriptor_;
}

const Vision_DetectionFrame& Vision_DetectionFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fdetection_2eproto();
  return *default_instance_;
}

Vision_DetectionFrame* Vision_DetectionFrame::default_instance_ = NULL;

Vision_DetectionFrame* Vision_DetectionFrame::New() const {
  return new Vision_DetectionFrame;
}

void Vision_DetectionFrame::Clear() {
  if (has_balls()) {
    if (balls_ != NULL) balls_->::Vision_DetectionBall::Clear();
  }
  robots_yellow_.Clear();
  robots_blue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vision_DetectionFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vision_DetectionFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Vision_DetectionBall balls = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_robots_yellow;
        break;
      }

      // repeated .Vision_DetectionRobot robots_yellow = 2;
      case 2: {
        if (tag == 18) {
         parse_robots_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_yellow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_robots_yellow;
        if (input->ExpectTag(26)) goto parse_robots_blue;
        break;
      }

      // repeated .Vision_DetectionRobot robots_blue = 3;
      case 3: {
        if (tag == 26) {
         parse_robots_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_blue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_robots_blue;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vision_DetectionFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vision_DetectionFrame)
  return false;
#undef DO_
}

void Vision_DetectionFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vision_DetectionFrame)
  // required .Vision_DetectionBall balls = 1;
  if (has_balls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->balls(), output);
  }

  // repeated .Vision_DetectionRobot robots_yellow = 2;
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->robots_yellow(i), output);
  }

  // repeated .Vision_DetectionRobot robots_blue = 3;
  for (int i = 0; i < this->robots_blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->robots_blue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vision_DetectionFrame)
}

::google::protobuf::uint8* Vision_DetectionFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionFrame)
  // required .Vision_DetectionBall balls = 1;
  if (has_balls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->balls(), target);
  }

  // repeated .Vision_DetectionRobot robots_yellow = 2;
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->robots_yellow(i), target);
  }

  // repeated .Vision_DetectionRobot robots_blue = 3;
  for (int i = 0; i < this->robots_blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->robots_blue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionFrame)
  return target;
}

int Vision_DetectionFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Vision_DetectionBall balls = 1;
    if (has_balls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->balls());
    }

  }
  // repeated .Vision_DetectionRobot robots_yellow = 2;
  total_size += 1 * this->robots_yellow_size();
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_yellow(i));
  }

  // repeated .Vision_DetectionRobot robots_blue = 3;
  total_size += 1 * this->robots_blue_size();
  for (int i = 0; i < this->robots_blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_blue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vision_DetectionFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vision_DetectionFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vision_DetectionFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vision_DetectionFrame::MergeFrom(const Vision_DetectionFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_balls()) {
      mutable_balls()->::Vision_DetectionBall::MergeFrom(from.balls());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vision_DetectionFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_DetectionFrame::CopyFrom(const Vision_DetectionFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_balls()) {
    if (!this->balls().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_yellow())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_blue())) return false;
  return true;
}

void Vision_DetectionFrame::Swap(Vision_DetectionFrame* other) {
  if (other != this) {
    std::swap(balls_, other->balls_);
    robots_yellow_.Swap(&other->robots_yellow_);
    robots_blue_.Swap(&other->robots_blue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vision_DetectionFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vision_DetectionFrame_descriptor_;
  metadata.reflection = Vision_DetectionFrame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
